name: Build and Publish Dev Docker Images

on:
  push:
    branches:
      - 'feat/**'  # All feature branches
      - 'fix/**'   # All fix branches
      - 'dev/**'   # All dev branches
  pull_request:
    types: [opened, synchronize]
  workflow_dispatch:  # Manual trigger

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push-dev:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    strategy:
      matrix:
        service: [backend, frontend]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract branch name
        shell: bash
        run: echo "BRANCH_NAME=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV

      - name: Sanitize branch name for Docker tag
        shell: bash
        run: |
          # Replace / with - and make lowercase
          SANITIZED=$(echo "$BRANCH_NAME" | sed 's/\//-/g' | tr '[:upper:]' '[:lower:]')
          echo "SANITIZED_BRANCH=$SANITIZED" >> $GITHUB_ENV

      - name: Extract metadata (tags, labels) for ${{ matrix.service }}
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}
          tags: |
            # Dev tag for all feature branches
            type=raw,value=dev
            # Branch-specific tag
            type=raw,value=dev-${{ env.SANITIZED_BRANCH }}
            # SHA tag for specific commit tracking
            type=sha,prefix=dev-,format=short

      - name: Build and push ${{ matrix.service }} Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.service }}
          file: ./${{ matrix.service }}/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Image digest
        run: echo "Image published with digest ${{ steps.build-and-push.outputs.digest }}"

  test-compose:
    runs-on: ubuntu-latest
    needs: build-and-push-dev
    if: github.event_name != 'pull_request'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create test directories
        run: |
          mkdir -p test/data test/media test/temp
          chmod -R 755 test/

      - name: Start services with docker-compose
        run: |
          docker compose -f docker-compose.dev.yml up -d

      - name: Wait for services to be ready
        run: |
          echo "Waiting for backend to be ready..."
          timeout 60 bash -c 'until curl -f http://localhost:8001/health > /dev/null 2>&1; do sleep 2; done'

          echo "Waiting for frontend to be ready..."
          timeout 60 bash -c 'until curl -f http://localhost:3333 > /dev/null 2>&1; do sleep 2; done'

      - name: Test API endpoints
        run: |
          # Test health endpoint
          curl -f http://localhost:8001/health || exit 1

          # Test channels endpoint
          curl -f http://localhost:8001/api/v1/channels || exit 1

          echo "âœ… All API tests passed"

      - name: Show service logs on failure
        if: failure()
        run: |
          echo "=== Backend logs ==="
          docker compose -f docker-compose.dev.yml logs backend
          echo "=== Frontend logs ==="
          docker compose -f docker-compose.dev.yml logs frontend

      - name: Cleanup
        if: always()
        run: |
          docker compose -f docker-compose.dev.yml down -v
          rm -rf test/
